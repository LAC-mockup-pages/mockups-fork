//* =======================================
//* Populating element values from selected data object
//* generated by first request to server.
//* Sections: Student Enrollment
//* =======================================

// Initializing Luxon DateTime class for the module
const DT = luxon.DateTime;

import { createOptionList, dateFormat } from "../main.js";

// Populating input element values
// Data source: /data-server.js/GetEnroll
export const enrollValues = (
  list,
  courses,
  reasons,
  transferList,
  formName
) => {
  // Sorting records in decreasing date of enrollment
  const orderedList = list.sort((record1, record2) =>
    // DT#fromFormat <== Luxon method, "D" token describes mm/dd/yyyy format
    DT.fromFormat(record1.EnrollDate, "D") >
    DT.fromFormat(record2.EnrollDate, "D")
      ? -1
      : DT.fromFormat(record1.EnrollDate, "D") <
        DT.fromFormat(record2.EnrollDate, "D")
      ? 1
      : 0
  );
  const tableBodyContent = [];

  for (const record of orderedList) {
    const {
      ID,
      DescriptionKey,
      EnrollDate,
      InactiveDate,
      InactiveReason,
      Transfer_PKID,
      ActiveStatus,
      ClassEndDate
    } = record;
    const optionListCourse = createOptionList(courses, DescriptionKey);
    const optionListReason = createOptionList(reasons, InactiveReason);
    const optionListTransfer = createOptionList(transferList, Transfer_PKID);
    const optionListActive = createOptionList(
      [
        { key: "0", value: "No" },
        { key: "1", value: "Yes" }
      ],
      ActiveStatus
    );
    const row = `
    <tr id=${ID} data-original-title="Click to Edit" data-toggle="tooltip"
    data-placement="left" >
      <td>
        <div class="form-group input-field">
        <select class="modal-select" disabled name="DescriptionKey">
        ${optionListCourse}
      </select>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <input type="text" disabled name="EnrollDate" value=${EnrollDate} >
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <input type="text" disabled data-enddate=${dateFormat(
            ClassEndDate
          )} name="InactiveDate" value=${InactiveDate} >
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <select class="modal-select" disabled name="InactiveReason">
            <option value></option>
            ${optionListReason}
          </select>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <select class="modal-select" disabled name="Transfer_PKID" >
            <option value></option>
            ${optionListTransfer}
          </select>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <select class="modal-select" disabled name="ActiveStatus" >
            ${optionListActive}
          </select>
        </div>
      </td>
    </tr>`;
    tableBodyContent.push(row);
  }
  $(formName).append(tableBodyContent.join(""));
};

// Used for Case Management as well as Enrollment
// caseFlag = '0' sets default value to define the new record as
// Enrollment
export const addNewRecord = (courses, reasons, transfers, caseFlag = "0") => {
  const labels = {
    DescriptionKey: "Course",
    FY: "Fiscal Year",
    EnrollDate: "Started",
    InactiveDate: "Left",
    InactiveReason: "Reason",
    Transfer_PKID: "Transfer to",
    ActiveStatus: "Active",
    ISCMP: "ISCMP"
  };
  const content = [];
  // createCredentials() ==> helpers/helperFunctions.js
  const { FiscalYear } = createCredentials();
  let labelClassVal = "";
  let classVal = "";
  for (const keyValue in labels) {
    const labelVal = labels[keyValue];
    let row = "";
    let value = keyValue === "FY" ? FiscalYear : "";
    let option = keyValue === "FY" ? "disabled" : "";

    if (["FY", "EnrollDate", "InactiveDate", "ISCMP"].includes(keyValue)) {
      // Input fields
      let optionHidden = "form-group";

      const type = keyValue.includes("Date") ? "date" : "text";
      if (keyValue === "ISCMP") {
        optionHidden += " hidden";
        value = caseFlag;
      }
      // if (requiredList.includes(keyValue)) {
      //   labelClassVal = "class='red-text'";
      //   classVal += `required data-original-title="Click to Edit" data-toggle="tooltip" data-placement="left"`;
      // }
      // elementInput() ==> helpers/helperFunctions.js
      row = elementInput({
        keyVal: keyValue,
        labelVal,
        value,
        labelClassVal,
        classVal,
        option,
        optionHidden,
        type
      });
    } else {
      // Select fields: DescriptionKey, InactiveReason, Transfer_PKID,
      // ActiveStatus
      let hashTable = [];
      switch (keyValue) {
        case "DescriptionKey":
          hashTable = courses;
          break;
        case "InactiveReason":
          hashTable = reasons;
          option = "disabled";
          break;
        case "Transfer_PKID":
          hashTable = transfers;
          option = "disabled";
          break;
        default:
          hashTable = [
            { key: "0", value: "No" },
            { key: "1", value: "Yes" }
          ];
          break;
      }
      // elementSelectModal() ==> helpers/helperFunction.js
      row = elementSelectModal({
        hashTable,
        keyValue,
        selectedValue: "",
        labelVal,
        labelClassVal,
        option,
        optionText: ""
      });
    }
    content.push(row);
  }
  return content.join("");
};

// Student was active and a valid InactiveDate has been entered
export const inactiveStatusProcess = () => {
  $("#edit-form :disabled").prop("disabled", false);
  $("#edit-form [name='ActiveStatus'").prop({
    selectedIndex: 1,
    disabled: true
  });
  $("#edit-form [name='InactiveReason'")
    .prop("required", true)
    .siblings("label")
    .addClass("red-text");
};
