//* =======================================
//* Populating element values from selected data object
//* generated by first request to server.
//* Sections: wioa
//* =======================================

import {
  createOptionList,
  modalOptionWioa,
  createFYValues,
  createFYList,
  outcomeList,
  credentialList
} from "../main.js";
// Initializing Luxon DateTime class for the module
const DT = luxon.DateTime;

export const createWioaContent = (list, outcomes, credentials) => {
  const tableBodyContent = [];
  const orderedList = list.sort((record1, record2) =>
    // DT#fromFormat <== Luxon method, "D" token describes mm/dd/yyyy format
    DT.fromFormat(record1.SurveyDate, "D") >
    DT.fromFormat(record2.SurveyDate, "D")
      ? -1
      : DT.fromFormat(record1.SurveyDate, "D") <
        DT.fromFormat(record2.SurveyDate, "D")
      ? 1
      : 0
  );

  for (const record of orderedList) {
    const {
      ID,
      OutcomeID,
      OutcomeFY,
      Quarter,
      SurveyDate,
      OutcomeDate,
      Income,
      NYSED_CredentialID
    } = record;
    const optionListOutcome = createOptionList(outcomeList, OutcomeID);
    const optionListCredential = createOptionList(
      credentialList,
      NYSED_CredentialID
    );
    const optionListQuarter = createOptionList(
      [
        { key: "1", value: "1" },
        { key: "2", value: "2" },
        { key: "3", value: "3" },
        { key: "4", value: "4" }
      ],
      Quarter
    );

    // currencyFormat() <== helpers/helperFunctions.js
    const formatedIncome = currencyFormat(Income);
    const row = `
    <tr id=${ID} data-original-title="Click to Edit" data-toggle="tooltip" data-placement="left">
      <td>
        <div class="form-group input-field">
          <select class="modal-select" disabled name="OutcomeID">
            ${optionListOutcome}
          </select>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <input type="text" disabled name="OutcomeFY" value=${OutcomeFY}>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
        <select class="modal-select" disabled name="Quarter">
        ${optionListQuarter}
      </select>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <input type="text" disabled name="SurveyDate" value=${SurveyDate}>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <input type="text" disabled name="OutcomeDate" value=${OutcomeDate}>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <input type="text" disabled name="Income" value=${formatedIncome}>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <select class="modal-select" disabled name="NYSED_CredentialID">
            <option></option>
            ${optionListCredential}
          </select>
        </div>
      </td>
    </tr>
    `;
    tableBodyContent.push(row);
  }
  return tableBodyContent.join("");
};

export const addNewOutcomeWIOA = (obj) => {
  const content = [];
  const { labels } = obj;
  let labelClassVal = "";
  let classVal = "";
  for (const keyValue in labels) {
    const labelVal = labels[keyValue];
    let row = "";
    let option = "";
    let value = "";
    // <input> fields
    if (["Quarter", "SurveyDate", "OutcomeDate", "Income"].includes(keyValue)) {
      let optionHidden = "form-group";
      const type = keyValue.includes("Date") ? "date" : "text";
      // elementInput() ==> helpers/helperFunctions.js
      row = elementInput({
        keyVal: keyValue,
        labelVal,
        value,
        labelClassVal,
        classVal,
        option,
        optionHidden,
        type
      });
    } else {
      // <select> fields
      let hashTable = [];
      let selectedValue = "";
      switch (keyValue) {
        case "OutcomeID":
          hashTable = outcomeList;
          break;
        case "NYSED_CredentialID":
          hashTable = credentialList;
          break;
        case "OutcomeFY":
          hashTable = createFYValues();
          selectedValue = hashTable[0].value;
          break;
        default:
          console.log("Default hit - Not right");
          return;
      }
      // elementSelectModal() ==> helpers/helperFunction.js
      row = elementSelectModal({
        hashTable,
        keyValue,
        selectedValue,
        labelVal,
        labelClassVal,
        option,
        optionText: ""
      });
    }
    content.push(row);
  }
  return content.join("");
};
