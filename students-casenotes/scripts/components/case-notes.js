//* =======================================
//* Populating element values from selected data object
//* generated by first request to server.
//* Sections: case-notes
//* =======================================

import { contactTypes, staff, keyCodes, createOptionList } from "../main.js";
// Initializing Luxon DateTime class for the module
const DT = luxon.DateTime;

export const createCaseNotesContent = (list) => {
  const tableBodyContent = [];
  const orderedList = list.sort((record1, record2) =>
    // DT#fromFormat <== Luxon method, "D" token describes mm/dd/yyyy format
    DT.fromFormat(record1.ContactDate, "D") >
    DT.fromFormat(record2.ContactDate, "D")
      ? -1
      : DT.fromFormat(record1.ContactDate, "D") <
        DT.fromFormat(record2.ContactDate, "D")
      ? 1
      : 0
  );

  for (const record of orderedList) {
    const {
      ID,
      ContactDate,
      ContactTypeID,
      KeyCodeID,
      Personnel_PKID,
      ContactHours,
      ContactNotes,
      AttachementLink
    } = record;
    const typeOptionList = createOptionList(contactTypes, ContactTypeID);
    const keywordOptionList = createOptionList(keyCodes, KeyCodeID);
    const staffOptionList = createOptionList(staff, Personnel_PKID);
    const attachment = AttachementLink ? "Yes" : "No";
    const row = `
      <tr id=${ID} data-original-title="Click to Edit" data-toggle="tooltip" data-placement="left" >
        <td>
          <div class="form-group input-field">
            <input type="text" disabled name="ContactDate" value=${ContactDate}>
          </div>
        </td>
        <td>
          <div class="form-group input-field">
            <select class="modal-select" disabled name="ContactTypeID">
              <option></option>
              ${typeOptionList}
            </select>
          </div>
        </td>
        <td>
          <div class="form-group input-field">
            <select class="modal-select" disabled name="KeyCodeID">
              <option></option>
              ${keywordOptionList}
            </select>
          </div>
        </td>
        <td>
          <div class="form-group input-field">
            <select class="modal-select" disabled name="Personnel_PKID">
              <option></option>
              ${staffOptionList}
            </select>
          </div>
        </td>
        <td>
          <div class="form-group input-field">
            <input type="text" disabled name="ContactHours" value=${ContactHours}>
          </div>
        </td>
        <td>
          <div class="form-group input-field">
            <textarea disabled name="ContactNotes" rows="3" cols="25">${ContactNotes}</textarea>
          </div>
        </td>
        <td>
          <div class="form-group input-field">
            <input type="text" disabled name="attachment" value=${attachment}>
          </div>
        </td>
      </tr>
    `;
    tableBodyContent.push(row);
  }
  return tableBodyContent.join("");
};

export const modalStyling = (list) => {
  // Dressing up required fields
  for (const name of list) {
    $(`#edit-form [name=${name}]`)
      .prop("required", true)
      .attr({
        "data-original-title": "Please fill in this field",
        "data-toggle": "tooltip",
        "data-placement": "right"
      })
      .siblings("label")
      .addClass("red-text");
  }
  // Formatting <textarea> for notes display
  $("#edit-form textarea")
    .attr({
      rows: "2",
      cols: "70"
    })
    .css("font-size", "1.2em");
  // Disabling the attachement field
  $("#edit-form [name='attachment']").prop("disabled", true);
  return;
};

export const addNewCase = (obj) => {
  const { labels } = obj;
  const content = [];
  let labelClassVal = "";
  let classVal = "";
  for (const keyValue in labels) {
    const labelVal = labels[keyValue];
    let row = "";
    let value = "";
    let option = "";

    if (["ContactDate", "ContactHours"].includes(keyValue)) {
      // Input fields
      let optionHidden = "form-group";
      const type = keyValue.includes("Date") ? "date" : "text";
      // elementInput() ==> helpers/helperFunctions.js
      row = elementInput({
        keyVal: keyValue,
        labelVal,
        value,
        labelClassVal,
        classVal,
        option,
        optionHidden,
        type
      });
    } else if (keyValue === "ContactNotes") {
      row = `
        <div class="form-group input-field">
          <label for=${keyValue}>${labelVal}</label>
          <textarea name=${keyValue} rows="2" cols="70"></textarea>
        </div>
        `;
    } else if (keyValue === "attachment") {
      continue;
    } else {
      // Select fields: ContactTypeID, KeyCodeID, Personnel_PKID
      let hashTable = [];
      switch (keyValue) {
        case "ContactTypeID":
          hashTable = contactTypes;
          break;
        case "KeyCodeID":
          hashTable = keyCodes;
          break;
        case "Personnel_PKID":
          hashTable = staff;
          break;
        default:
          hashTable = [
            { key: "0", value: "No" },
            { key: "1", value: "Yes" }
          ];
          break;
      }
      // elementSelectModal() ==> helpers/helperFunction.js
      row = elementSelectModal({
        hashTable,
        keyValue,
        selectedValue: "",
        labelVal,
        labelClassVal,
        option,
        optionText: ""
      });
    }
    content.push(row);
  }
  return content.join("");
};
