//* =======================================
//* Populating element values from selected data object
//* generated by first request to server.
//* Sections: Barriers categories
//* =======================================

import { createOptionList } from "../main.js";

// Data sources: /original-data/student-data.js/GetStudent
//          /data-server.js/ddlBarriers

export const barriersValues = (obj) => {
  const valuesObj = {};
  const keyList = ddlBarriers.map((record) => record.key);
  for (const key of keyList) {
    valuesObj[key] = obj[key];
  }
  const fieldsWithAnswer = Object.keys(valuesObj).filter(
    (key) => valuesObj[key] !== "2"
  );
  const formContent = [];
  for (const key of fieldsWithAnswer) {
    const optionList = createOptionList(ddlBarriers, key);
    const optionListYesNoNA = createOptionList(
      [
        { key: "0", value: "No" },
        { key: "1", value: "Yes" },
        { key: "2", value: "No answer" }
      ],
      valuesObj[key]
    );
    const row = `
    <div class="input-field form-group col-sm-8">
      <select class="modal-select" name="barrier" disabled>
        ${optionList}
      </select>
    </div>
    <div class="input-field form-group col-sm-2">
      <select class="modal-select" name="yes-no" disabled>
        ${optionListYesNoNA}
      </select>
    </div>
    <div class="col-sm-2"></div>`;
    formContent.push(row);
  }
  $(".barriers-form").append(
    `<div class="row">
      ${formContent.join("")}
    </div>`
  );
};

// List argument is dataSource /data-server.js/ddlBarriers
export const addNewSelect = (list, section) => {
  const selection = $(`#edit-form [name=${section}]`)
    .serializeArray()
    .map((item) => item.value);
  const updatedDdl = list.filter((record) => !selection.includes(record.key));
  // Checks if there is at least 1 value left in the list
  if (updatedDdl.length < 1) return;
  const newOptionList = createOptionList(updatedDdl);
  const newSelectLine = `
    <div class="input-field form-group col-sm-8">
      <select class="modal-select" name=${section}>
        <option value>Select a value</option>
        ${newOptionList}
      </select>
    </div>
    <div class="input-field form-group col-sm-2">
      <select class="modal-select medium-input" name="yes-no">
        <option value></option>
        <option value="0">No</option>
        <option value="1">Yes</option>
      </select>
    </div>
    <div class="col-sm-2"></div>`;
  $("#edit-form .row").append(newSelectLine);
  $(`#edit-form select[name=${section}]:last-of-type`).focus();
};

// Add all the selected choices with their yes/no answer.
export const sectionProcess = (list) => {
  const fields = $("#edit-form").serializeArray();
  const fieldsObj = {};
  const fieldsList = [];
  const filteredList = fields.filter((obj) => obj.value);
  for (let i = 0; i < filteredList.length; i += 2) {
    const key = filteredList[i].value;
    const val = filteredList[i + 1].value;
    fieldsObj[key] = val;
    fieldsList.push(key);
  }
  list
    .map((obj) => obj.key)
    .filter((item) => !fieldsList.includes(item))
    .forEach((item) => (fieldsObj[item] = "2"));
  return fieldsObj;
};
