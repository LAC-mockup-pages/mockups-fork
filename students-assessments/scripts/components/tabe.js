//* =======================================
//* Populating element values from selected data object
//* generated by first request to server.
//* Sections: tabe11
//* =======================================

import {
  tabeForm,
  tabeLevels,
  tabeMode,
  tabeType,
  staffList,
  createOptionList,
  createStaffList
} from "../main.js";
// Initializing Luxon DateTime class for the module
const DT = luxon.DateTime;

export const createTabeContent = (list) => {
  let tableBodyContent = [];
  const { FiscalYear } = createCredentials();
  const orderedList = list.sort((record1, record2) =>
    // DT#fromFormat <== Luxon method, "D" token describes mm/dd/yyyy format
    DT.fromFormat(record1.TABEDate, "D") > DT.fromFormat(record2.TABEDate, "D")
      ? -1
      : DT.fromFormat(record1.TABEDate, "D") <
        DT.fromFormat(record2.TABEDate, "D")
      ? 1
      : 0
  );
  for (const record of orderedList) {
    const {
      ID,
      TABEDate,
      TestType,
      TestForm,
      TestLevel,
      Pre_Post,
      TestMode,
      SubScore1,
      ScaleScore,
      NRSLevel,
      Personnel_PKID
    } = record;
    const optionListType = createOptionList(tabeType, TestType);
    const optionListForm = createOptionList(tabeForm, TestForm);
    const optionListLevel = createOptionList(tabeLevels, TestLevel);
    const optionListMode = createOptionList(tabeMode, TestMode);
    const optionListStaff = createOptionList(
      createStaffList(staffList),
      Personnel_PKID
    );
    const row = `
    <tr id=${ID} data-original-title="Click to Edit" data-toggle="tooltip" data-placement="left" >
      <td>
        <div class="form-group input-field">
          <input type="text" disabled name="TABEDate" value=${TABEDate}>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <select class="modal-select" disabled name="TestType">
            ${optionListType}
          </select>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <select class="modal-select" disabled name="TestForm">
          <option></option>
            ${optionListForm}
          </select>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <select class="modal-select" disabled name="TestLevel">
          <option></option>
            ${optionListLevel}
          </select>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <input type="text" disabled name="Pre_Post" value=${Pre_Post}>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <select class="modal-select" disabled name="TestMode">
          <option></option>
            ${optionListMode}
          </select>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <input  type="text" disabled name="SubScore1" value=${SubScore1}>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
        <input type="text" disabled name="ScaleScore" value=${ScaleScore}>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <input type="text" disabled name="NRSLevel" value=${NRSLevel}>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <select class="modal-select" disabled name="Personnel_PKID">
            ${optionListStaff}
          </select>
        </div>
      </td>
    </tr>
  `;
    tableBodyContent.push(row);
  }
  return tableBodyContent.join("");
};

export const addNewTabeTest = (obj) => {
  const content = [];
  const { labels } = obj;

  console.table("labels :>> ", labels);
  let labelClassVal = "";
  let classVal = "";

  for (const keyValue in labels) {
    const labelVal = labels[keyValue];
    let row = "";
    let option = "";
    let value = "";

    // <input> fields
    if (
      ["TABEDate", "Pre_Post", "SubScore1", "ScaleScore", "NRSLevel"].includes(
        keyValue
      )
    ) {
      let optionHidden = "form-group";
      const type = keyValue.includes("Date") ? "date" : "text";
      // elementInput() ==> helpers/helperFunctions.js
      row = elementInput({
        keyVal: keyValue,
        labelVal,
        value,
        labelClassVal,
        classVal,
        option,
        optionHidden,
        type
      });
    } else {
      // <select> fields
      let hashTable;
      switch (keyValue) {
        case "TestType":
          hashTable = tabeType;
          break;
        case "TestForm":
          hashTable = tabeForm;
          break;
        case "TestLevel":
          hashTable = tabeLevels;
          break;
        case "TestMode":
          hashTable = tabeMode;
          break;

        default:
          hashTable = createStaffList(staffList);
          break;
      }
      // elementSelectModal() ==> helpers/helperFunction.js
      row = elementSelectModal({
        hashTable,
        keyValue,
        selectedValue: "",
        labelVal,
        labelClassVal,
        option,
        optionText: ""
      });
    }
    content.push(row);
  }
  return content.join("");
};

export const updateTABEScore = (type, form, level, mode, score) => {
  // Test score is evaluated depending on test level (GetLevel_TABE11).
  // Each level has a range Min/Max for the score value to be valid.
  // Different test types have different test score ranges
  const evalTR = (testLevel, testScore) => {
    const reference = {
      L: [0, 40],
      E: [0, 44],
      M: [8, 47],
      D: [14, 50],
      A: [15, 56]
    };
    const list = [...reference[testLevel], Number(testScore)];
    const indx = list.sort(num1, num2).lastIndexOf(testScore);
    return indx === 1 ? indx : 0;
  };
  const evalTM = (testLevel, testScore, testForm) => {
    const reference =
      testForm === "11"
        ? { L: [0, 35], E: [0, 35], M: [11, 39], D: [10, 37], A: [11, 39] }
        : { L: [0, 35], E: [0, 35], M: [10, 39], D: [10, 37], A: [11, 39] };
    const list = [...reference[testLevel], Number(testScore)];
    const indx = list.sort(num1, num2).lastIndexOf(testScore);
    return indx === 1 ? indx : 0;
  };
  let flag = 1; // Changed flag value to 1 if in range and 0 if out of range
  switch (type) {
    case "ML":
    case "RL":
      if (score > 50) flag = 0;
      break;
    case "TR":
      flag = evalTR(level, score);
      break;
    case "TM":
      flag = evalTM(level, score, form);
      break;
    default:
      flag = 0;
      break;
  }
  if (!flag) {
    $("#edit-form input[name='SubScore1']")
      .css("background-color", "#f7e095")
      .focus();
    return;
  } else {
  }
  // return flag;
};
