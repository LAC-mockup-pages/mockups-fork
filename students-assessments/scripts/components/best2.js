//* =======================================
//* Populating element values from selected data object
//* generated by first request to server.
//* Sections: best-plus2
//* =======================================

import {
  bestPlusForm,
  createOptionList,
  createStaffList,
  staffList
} from "../main.js";
// Initializing Luxon DateTime class for the module
const DT = luxon.DateTime;

export const createBestContent = (list) => {
  const tableBodyContent = [];
  const orderedList = list.sort((record1, record2) =>
    // DT#fromFormat <== Luxon method, "D" token describes mm/dd/yyyy format
    DT.fromFormat(record1.TestDate, "D") > DT.fromFormat(record2.TestDate, "D")
      ? -1
      : DT.fromFormat(record1.TestDate, "D") <
        DT.fromFormat(record2.TestDate, "D")
      ? 1
      : 0
  );
  for (const record of orderedList) {
    const {
      ID,
      TestDate,
      TestForm,
      Score,
      NRSLevel,
      Pre_Post,
      Personnel_PKID
    } = record;

    let elementTestForm = "";
    if (TestForm) {
      const optionListForm = createOptionList(bestPlusForm, TestForm);
      elementTestForm = `
        <td>
          <div class="form-group input-field">
            <select class="modal-select" disabled name="TestForm">
              ${optionListForm}
            </select>
          </div>
        </td>
    `;
    }
    const optionListStaff = createOptionList(
      createStaffList(staffList),
      Personnel_PKID
    );
    const row = `
    <tr id=${ID} data-original-title="Click to Edit" data-toggle="tooltip" data-placement="left" >
      <td>
        <div class="form-group input-field">
          <input type="text" disabled name="TestDate" value=${TestDate}>
        </div>
      </td>
        ${elementTestForm}
      <td>
        <div class="form-group input-field">
          <input type="text" disabled name="Score" value=${Score}>
        </div>
      </td>
      <td>
      <div class="form-group input-field">
        <input type="text" disabled name="NRSLevel" value=${NRSLevel}>
      </div>
    </td>
    <td>
        <div class="form-group input-field">
          <input type="text" disabled name="Pre_Post" value=${Pre_Post}>
        </div>
      </td>
      <td>
        <div class="form-group input-field">
          <select class="modal-select" disabled name="Personnel_PKID">
            ${optionListStaff}
          </select>
        </div>
      </td>
    </tr>`;
    tableBodyContent.push(row);
  }
  return tableBodyContent.join("");
};

export const addNewBestPlusTest = (obj) => {
  const content = [];
  const { labels } = obj;

  console.table("labels :>> ", labels);
  let labelClassVal = "";
  let classVal = "";

  for (const keyValue in labels) {
    const labelVal = labels[keyValue];
    let row = "";
    let option = "";
    let value = "";

    // <input> fields
    if (["TestDate", "Pre_Post", "Score", "NRSLevel"].includes(keyValue)) {
      let optionHidden = "form-group";
      const type = keyValue.includes("Date") ? "date" : "text";
      // elementInput() ==> helpers/helperFunctions.js
      row = elementInput({
        keyVal: keyValue,
        labelVal,
        value,
        labelClassVal,
        classVal,
        option,
        optionHidden,
        type
      });
    } else {
      // <select> fields
      let hashTable;
      switch (keyValue) {
        case "TestForm":
          hashTable = bestPlusForm;
          break;
        default:
          hashTable = createStaffList(staffList);
          break;
      }
      // elementSelectModal() ==> helpers/helperFunction.js
      row = elementSelectModal({
        hashTable,
        keyValue,
        selectedValue: "",
        labelVal,
        labelClassVal,
        option,
        optionText: ""
      });
    }
    content.push(row);
  }
  return content.join("");
};

export const setNRSLevel = async (num, table) => {
  const levelList =
    table === "GetTests_BestPlus2"
      ? [87, 361, 427, 452, 484, 524, 564]
      : [0, 20, 52, 63, 67, 75, 78];
  if (num > levelList.slice(-1)) return levelList.length;
  const indx = levelList.findIndex((item) => num <= item).toString();
  return indx;
};
